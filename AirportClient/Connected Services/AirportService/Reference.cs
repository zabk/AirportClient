//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AirportClient.AirportService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Airport", Namespace="http://schemas.datacontract.org/2004/07/AirportService")]
    [System.SerializableAttribute()]
    public partial class Airport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AirportIATACodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AirportICAOCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinimaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AirportIATACode {
            get {
                return this.AirportIATACodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AirportIATACodeField, value) != true)) {
                    this.AirportIATACodeField = value;
                    this.RaisePropertyChanged("AirportIATACode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AirportICAOCode {
            get {
                return this.AirportICAOCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AirportICAOCodeField, value) != true)) {
                    this.AirportICAOCodeField = value;
                    this.RaisePropertyChanged("AirportICAOCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Minima {
            get {
                return this.MinimaField;
            }
            set {
                if ((this.MinimaField.Equals(value) != true)) {
                    this.MinimaField = value;
                    this.RaisePropertyChanged("Minima");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AirportService.IAirportService")]
    public interface IAirportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/GetAirport", ReplyAction="http://tempuri.org/IAirportService/GetAirportResponse")]
        AirportClient.AirportService.Airport GetAirport(string airportICAOCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/GetAirport", ReplyAction="http://tempuri.org/IAirportService/GetAirportResponse")]
        System.Threading.Tasks.Task<AirportClient.AirportService.Airport> GetAirportAsync(string airportICAOCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/SaveAirport", ReplyAction="http://tempuri.org/IAirportService/SaveAirportResponse")]
        void SaveAirport(AirportClient.AirportService.Airport airport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/SaveAirport", ReplyAction="http://tempuri.org/IAirportService/SaveAirportResponse")]
        System.Threading.Tasks.Task SaveAirportAsync(AirportClient.AirportService.Airport airport);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAirportServiceChannel : AirportClient.AirportService.IAirportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AirportServiceClient : System.ServiceModel.ClientBase<AirportClient.AirportService.IAirportService>, AirportClient.AirportService.IAirportService {
        
        public AirportServiceClient() {
        }
        
        public AirportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AirportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AirportClient.AirportService.Airport GetAirport(string airportICAOCode) {
            return base.Channel.GetAirport(airportICAOCode);
        }
        
        public System.Threading.Tasks.Task<AirportClient.AirportService.Airport> GetAirportAsync(string airportICAOCode) {
            return base.Channel.GetAirportAsync(airportICAOCode);
        }
        
        public void SaveAirport(AirportClient.AirportService.Airport airport) {
            base.Channel.SaveAirport(airport);
        }
        
        public System.Threading.Tasks.Task SaveAirportAsync(AirportClient.AirportService.Airport airport) {
            return base.Channel.SaveAirportAsync(airport);
        }
    }
}
